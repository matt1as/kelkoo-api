/**
 * Shopping API
 * KelkooGroup next generation shopping API. Documentation available at https://developers.kelkoogroup.com/.
 *
 * The version of the OpenAPI document: 4.21.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ShoppingOfferBrand } from './shoppingOfferBrand';
import { ShoppingOfferCategory } from './shoppingOfferCategory';
import { ShoppingOfferCodes } from './shoppingOfferCodes';
import { ShoppingOfferFeature } from './shoppingOfferFeature';
import { ShoppingOfferFlags } from './shoppingOfferFlags';
import { ShoppingOfferImageUrl } from './shoppingOfferImageUrl';
import { ShoppingOfferMerchant } from './shoppingOfferMerchant';
import { ShoppingOfferUrls } from './shoppingOfferUrls';

export class ShoppingOffer {
  'offerId': string;
  'offerType'?: string;
  'title'?: string;
  'lastUpdateDate'?: number;
  'description'?: string;
  'country'?: string;
  'price'?: number;
  'priceWithoutRebate'?: number;
  'monthPrice'?: number;
  'rebatePercentage'?: object;
  'rebateEndDate'?: number;
  'deliveryCost'?: number;
  'priceDiscountText'?: string;
  'totalPrice'?: number;
  'unitPrice'?: string;
  'currency'?: string;
  'availabilityStatus'?: string;
  'timeToDeliver'?: string;
  'condition'?: string;
  'warranty'?: string;
  'greenLabel'?: string;
  'flag'?: ShoppingOfferFlags;
  'code'?: ShoppingOfferCodes;
  'images'?: Array<ShoppingOfferImageUrl>;
  'features'?: { [key: string]: ShoppingOfferFeature };
  'offerUrl'?: ShoppingOfferUrls;
  'goUrl'?: string;
  'estimatedCpc'?: number;
  'estimatedMobileCpc'?: number;
  'brand'?: ShoppingOfferBrand;
  'merchant'?: ShoppingOfferMerchant;
  'merchantProvidedCategory'?: string;
  'category'?: ShoppingOfferCategory;
  'googleProductCategory'?: ShoppingOfferCategory;
  'ecotax'?: number;
  'madeIn'?: string;
  'efficiencyClass'?: string;
  'performanceScore'?: number;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
    {
      name: 'offerId',
      baseName: 'offerId',
      type: 'string',
    },
    {
      name: 'offerType',
      baseName: 'offerType',
      type: 'string',
    },
    {
      name: 'title',
      baseName: 'title',
      type: 'string',
    },
    {
      name: 'lastUpdateDate',
      baseName: 'lastUpdateDate',
      type: 'number',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'country',
      baseName: 'country',
      type: 'string',
    },
    {
      name: 'price',
      baseName: 'price',
      type: 'number',
    },
    {
      name: 'priceWithoutRebate',
      baseName: 'priceWithoutRebate',
      type: 'number',
    },
    {
      name: 'monthPrice',
      baseName: 'monthPrice',
      type: 'number',
    },
    {
      name: 'rebatePercentage',
      baseName: 'rebatePercentage',
      type: 'object',
    },
    {
      name: 'rebateEndDate',
      baseName: 'rebateEndDate',
      type: 'number',
    },
    {
      name: 'deliveryCost',
      baseName: 'deliveryCost',
      type: 'number',
    },
    {
      name: 'priceDiscountText',
      baseName: 'priceDiscountText',
      type: 'string',
    },
    {
      name: 'totalPrice',
      baseName: 'totalPrice',
      type: 'number',
    },
    {
      name: 'unitPrice',
      baseName: 'unitPrice',
      type: 'string',
    },
    {
      name: 'currency',
      baseName: 'currency',
      type: 'string',
    },
    {
      name: 'availabilityStatus',
      baseName: 'availabilityStatus',
      type: 'string',
    },
    {
      name: 'timeToDeliver',
      baseName: 'timeToDeliver',
      type: 'string',
    },
    {
      name: 'condition',
      baseName: 'condition',
      type: 'string',
    },
    {
      name: 'warranty',
      baseName: 'warranty',
      type: 'string',
    },
    {
      name: 'greenLabel',
      baseName: 'greenLabel',
      type: 'string',
    },
    {
      name: 'flag',
      baseName: 'flag',
      type: 'ShoppingOfferFlags',
    },
    {
      name: 'code',
      baseName: 'code',
      type: 'ShoppingOfferCodes',
    },
    {
      name: 'images',
      baseName: 'images',
      type: 'Array<ShoppingOfferImageUrl>',
    },
    {
      name: 'features',
      baseName: 'features',
      type: '{ [key: string]: ShoppingOfferFeature; }',
    },
    {
      name: 'offerUrl',
      baseName: 'offerUrl',
      type: 'ShoppingOfferUrls',
    },
    {
      name: 'goUrl',
      baseName: 'goUrl',
      type: 'string',
    },
    {
      name: 'estimatedCpc',
      baseName: 'estimatedCpc',
      type: 'number',
    },
    {
      name: 'estimatedMobileCpc',
      baseName: 'estimatedMobileCpc',
      type: 'number',
    },
    {
      name: 'brand',
      baseName: 'brand',
      type: 'ShoppingOfferBrand',
    },
    {
      name: 'merchant',
      baseName: 'merchant',
      type: 'ShoppingOfferMerchant',
    },
    {
      name: 'merchantProvidedCategory',
      baseName: 'merchantProvidedCategory',
      type: 'string',
    },
    {
      name: 'category',
      baseName: 'category',
      type: 'ShoppingOfferCategory',
    },
    {
      name: 'googleProductCategory',
      baseName: 'googleProductCategory',
      type: 'ShoppingOfferCategory',
    },
    {
      name: 'ecotax',
      baseName: 'ecotax',
      type: 'number',
    },
    {
      name: 'madeIn',
      baseName: 'madeIn',
      type: 'string',
    },
    {
      name: 'efficiencyClass',
      baseName: 'efficiencyClass',
      type: 'string',
    },
    {
      name: 'performanceScore',
      baseName: 'performanceScore',
      type: 'number',
    },
  ];

  static getAttributeTypeMap() {
    return ShoppingOffer.attributeTypeMap;
  }
}
