/**
 * Shopping API
 * KelkooGroup next generation shopping API. Documentation available at https://developers.kelkoogroup.com/.
 *
 * The version of the OpenAPI document: 4.21.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { MerchantVisibilityChanges } from '../model/merchantVisibilityChanges';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.kelkoogroup.net/publisher/shopping/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ChangesApiApiKeys {
  JWT,
}

export class ChangesApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    JWT: new ApiKeyAuth('header', 'jwt'),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: ChangesApiApiKeys, value: string) {
    (this.authentications as any)[ChangesApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Get merchant visibility changes
   * @param country Country
   * @param from Start time of the period (ISO 8601 format)
   * @param to End time of the period (ISO 8601 format)
   */
  public async merchantVisibilityChanges(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    from: string,
    to?: string,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: MerchantVisibilityChanges }> {
    const localVarPath = this.basePath + '/changes/merchant-visibility';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling merchantVisibilityChanges.');
    }

    // verify required parameter 'from' is not null or undefined
    if (from === null || from === undefined) {
      throw new Error('Required parameter from was null or undefined when calling merchantVisibilityChanges.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (from !== undefined) {
      localVarQueryParameters['from'] = ObjectSerializer.serialize(from, 'string');
    }

    if (to !== undefined) {
      localVarQueryParameters['to'] = ObjectSerializer.serialize(to, 'string');
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: MerchantVisibilityChanges }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'MerchantVisibilityChanges');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
