/**
 * Shopping API
 * KelkooGroup next generation shopping API. Documentation available at https://developers.kelkoogroup.com/.
 *
 * The version of the OpenAPI document: 4.21.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CategoryTreeOutput } from '../model/categoryTreeOutput';
import { FlatCategories } from '../model/flatCategories';
import { MerchantDTO } from '../model/merchantDTO';
import { ShoppingOffer } from '../model/shoppingOffer';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.kelkoogroup.net/publisher/shopping/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FeedsApiApiKeys {
  JWT,
}

export class FeedsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    JWT: new ApiKeyAuth('header', 'jwt'),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: FeedsApiApiKeys, value: string) {
    (this.authentications as any)[FeedsApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Get categories feed as a list
   * @param country Country
   * @param acceptEncoding
   * @param format Response Format
   * @param level Retrieve only categories at the given level. No filter if not provided.
   */
  public async categoryList(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    acceptEncoding: string,
    format?: 'xml' | 'json' | 'csv',
    level?: number,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: Array<FlatCategories> }> {
    const localVarPath = this.basePath + '/feeds/category-list';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json', 'application/xml', 'text/csv'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling categoryList.');
    }

    // verify required parameter 'acceptEncoding' is not null or undefined
    if (acceptEncoding === null || acceptEncoding === undefined) {
      throw new Error('Required parameter acceptEncoding was null or undefined when calling categoryList.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (format !== undefined) {
      localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "'xml' | 'json' | 'csv'");
    }

    if (level !== undefined) {
      localVarQueryParameters['level'] = ObjectSerializer.serialize(level, 'number');
    }

    localVarHeaderParams['Accept-Encoding'] = ObjectSerializer.serialize(acceptEncoding, 'string');
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<FlatCategories> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'Array<FlatCategories>');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get categories feed as a tree
   * @param country Country
   * @param acceptEncoding
   * @param format Response Format
   */
  public async categoryTree(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    acceptEncoding: string,
    format?: 'xml' | 'json',
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: CategoryTreeOutput }> {
    const localVarPath = this.basePath + '/feeds/category-tree';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json', 'application/xml'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling categoryTree.');
    }

    // verify required parameter 'acceptEncoding' is not null or undefined
    if (acceptEncoding === null || acceptEncoding === undefined) {
      throw new Error('Required parameter acceptEncoding was null or undefined when calling categoryTree.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (format !== undefined) {
      localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "'xml' | 'json'");
    }

    localVarHeaderParams['Accept-Encoding'] = ObjectSerializer.serialize(acceptEncoding, 'string');
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: CategoryTreeOutput }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'CategoryTreeOutput');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get offers feed in PLA format
   * @param country Country
   * @param categoryId Category ID
   * @param merchantId Merchant ID
   * @param part Part
   * @param numberOfParts Number of parts
   * @param topOffers Top offers sorted by performanceScore
   */
  public async getPlaOffers(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    categoryId?: number,
    merchantId?: number,
    part?: number,
    numberOfParts?: 1 | 2 | 4 | 8,
    topOffers?: number,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: Array<ShoppingOffer> }> {
    const localVarPath = this.basePath + '/feeds/pla';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['text/tab-separated-values'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling getPlaOffers.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (categoryId !== undefined) {
      localVarQueryParameters['categoryId'] = ObjectSerializer.serialize(categoryId, 'number');
    }

    if (merchantId !== undefined) {
      localVarQueryParameters['merchantId'] = ObjectSerializer.serialize(merchantId, 'number');
    }

    if (part !== undefined) {
      localVarQueryParameters['part'] = ObjectSerializer.serialize(part, 'number');
    }

    if (numberOfParts !== undefined) {
      localVarQueryParameters['numberOfParts'] = ObjectSerializer.serialize(numberOfParts, '1 | 2 | 4 | 8');
    }

    if (topOffers !== undefined) {
      localVarQueryParameters['topOffers'] = ObjectSerializer.serialize(topOffers, 'number');
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<ShoppingOffer> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'Array<ShoppingOffer>');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get offers feed
   * @param country Country
   * @param acceptEncoding
   * @param categoryId Category ID
   * @param merchantId Merchant ID
   * @param part Part
   * @param numberOfParts Number of parts
   * @param format Response format
   * @param fieldsAlias Predefined set of fields. The set defined as &#x60;minimal&#x60; contains the most useful fields.
   * @param additionalFields List of fields that will be returned in addition to the fields selected by &#x60;fieldsAlias&#x60;. The field names are expected in camelCase. Example: &#x60;additionalFields&#x3D;brandId,featureType&#x60;.
   * @param topOffers Top offers sorted by performanceScore
   */
  public async getShoppingOffers(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    acceptEncoding: string,
    categoryId?: number,
    merchantId?: number,
    part?: number,
    numberOfParts?: 1 | 2 | 4 | 8,
    format?: 'json' | 'xml' | 'csv' | 'tsv',
    fieldsAlias?: 'none' | 'minimal' | 'all',
    additionalFields?: string,
    topOffers?: number,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: Array<ShoppingOffer> }> {
    const localVarPath = this.basePath + '/feeds/offers';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json', 'application/xml', 'text/csv', 'text/tab-separated-values'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling getShoppingOffers.');
    }

    // verify required parameter 'acceptEncoding' is not null or undefined
    if (acceptEncoding === null || acceptEncoding === undefined) {
      throw new Error('Required parameter acceptEncoding was null or undefined when calling getShoppingOffers.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (categoryId !== undefined) {
      localVarQueryParameters['categoryId'] = ObjectSerializer.serialize(categoryId, 'number');
    }

    if (merchantId !== undefined) {
      localVarQueryParameters['merchantId'] = ObjectSerializer.serialize(merchantId, 'number');
    }

    if (part !== undefined) {
      localVarQueryParameters['part'] = ObjectSerializer.serialize(part, 'number');
    }

    if (numberOfParts !== undefined) {
      localVarQueryParameters['numberOfParts'] = ObjectSerializer.serialize(numberOfParts, '1 | 2 | 4 | 8');
    }

    if (format !== undefined) {
      localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "'json' | 'xml' | 'csv' | 'tsv'");
    }

    if (fieldsAlias !== undefined) {
      localVarQueryParameters['fieldsAlias'] = ObjectSerializer.serialize(fieldsAlias, "'none' | 'minimal' | 'all'");
    }

    if (additionalFields !== undefined) {
      localVarQueryParameters['additionalFields'] = ObjectSerializer.serialize(additionalFields, 'string');
    }

    if (topOffers !== undefined) {
      localVarQueryParameters['topOffers'] = ObjectSerializer.serialize(topOffers, 'number');
    }

    localVarHeaderParams['Accept-Encoding'] = ObjectSerializer.serialize(acceptEncoding, 'string');
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<ShoppingOffer> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'Array<ShoppingOffer>');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get merchants feed
   * @param country Country
   * @param acceptEncoding
   * @param format Response format
   * @param offerMatch Include/exclude merchants with offer match available
   * @param merchantMatch Include/exclude merchants with merchant match available
   * @param merchantId Merchant ID
   * @param onlyAvailableMerchants Only include merchants that have some type of traffic available
   */
  public async merchantList(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    acceptEncoding: string,
    format?: 'json' | 'xml' | 'csv',
    offerMatch?: 'yes' | 'no' | 'any',
    merchantMatch?: 'yes' | 'no' | 'any',
    merchantId?: number,
    onlyAvailableMerchants?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: Array<MerchantDTO> }> {
    const localVarPath = this.basePath + '/feeds/merchants';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json', 'application/xml', 'text/csv'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling merchantList.');
    }

    // verify required parameter 'acceptEncoding' is not null or undefined
    if (acceptEncoding === null || acceptEncoding === undefined) {
      throw new Error('Required parameter acceptEncoding was null or undefined when calling merchantList.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (format !== undefined) {
      localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "'json' | 'xml' | 'csv'");
    }

    if (offerMatch !== undefined) {
      localVarQueryParameters['offerMatch'] = ObjectSerializer.serialize(offerMatch, "'yes' | 'no' | 'any'");
    }

    if (merchantMatch !== undefined) {
      localVarQueryParameters['merchantMatch'] = ObjectSerializer.serialize(merchantMatch, "'yes' | 'no' | 'any'");
    }

    if (merchantId !== undefined) {
      localVarQueryParameters['merchantId'] = ObjectSerializer.serialize(merchantId, 'number');
    }

    if (onlyAvailableMerchants !== undefined) {
      localVarQueryParameters['onlyAvailableMerchants'] = ObjectSerializer.serialize(onlyAvailableMerchants, 'boolean');
    }

    localVarHeaderParams['Accept-Encoding'] = ObjectSerializer.serialize(acceptEncoding, 'string');
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: Array<MerchantDTO> }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'Array<MerchantDTO>');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
