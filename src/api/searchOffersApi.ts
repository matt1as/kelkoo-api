/**
 * Shopping API
 * KelkooGroup next generation shopping API. Documentation available at https://developers.kelkoogroup.com/.
 *
 * The version of the OpenAPI document: 4.21.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ShoppingOffersResult } from '../model/shoppingOffersResult';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.kelkoogroup.net/publisher/shopping/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SearchOffersApiApiKeys {
  JWT,
}

export class SearchOffersApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    JWT: new ApiKeyAuth('header', 'jwt'),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: SearchOffersApiApiKeys, value: string) {
    (this.authentications as any)[SearchOffersApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Search for offers.
   * @param country Country
   * @param query Query
   * @param queryMatchStrength Query match strength for query terms. Example &#x60;queryMatchStrength&#x3D;all&#x60;
   * @param filterBy Filter \&#39;&#x3D;\&#39; on discrete distribution fields. Example &#x60;filterBy&#x3D;codeEan:53255452354+25234&#x60;
   * @param filterGreaterThan Filter \&#39;&gt;\&#39; on continuous distribution fields. Example &#x60;filterGreaterThan&#x3D;price:100&#x60;
   * @param filterGreaterThanEqual Filter \&#39;&gt;&#x3D;\&#39; on continuous distribution fields. Example &#x60;filterGreaterThanEqual&#x3D;price:100&#x60;
   * @param filterLowerThan Filter \&#39;&lt;\&#39; on continuous distribution fields. Example &#x60;filterLowerThan&#x3D;price:500&#x60;
   * @param filterLowerThanEqual Filter \&#39;&lt;&#x3D;\&#39; on continuous distribution fields. Example &#x60;filterLowerThanEqual&#x3D;price:500&#x60;
   * @param filterValueExists Filter on the existence of a value. Example &#x60;filterValueExists&#x3D;deliveryCost:true&#x60;
   * @param fieldsAlias Predefined set of fields. The set defined as &#x60;minimal&#x60; contains the most useful fields.
   * @param additionalFields List of fields that should be returned in addition to the fields selected by &#x60;fieldsAlias&#x60;. The field names are expected in camelCase. Example: &#x60;additionalFields&#x3D;brandId,featureType&#x60;.
   * @param sortBy Sort field
   * @param sortDirection Sort direction
   * @param pageSize Page size
   * @param page Page number
   * @param topOffers Top offers by performanceScore. Can not be used in conjunction with sorting or pagination. Use with a query may yield results unrelated to the query.
   * @param fieldsMeta Fields with metadata. The field names are expected in camelCase. Example: &#x60;fieldsMeta&#x3D;brandId,price&#x60;.
   * @param facets Fields with facets. The field names are expected in camelCase. Example: &#x60;facets&#x3D;brandId,merchantId&#x60;.
   * @param facetValues Number of facet values returned on fields with a discrete distribution. There is no max value, so if you need all possible values, provide here the max number of values your UI can handle. Example: &#x60;facetValues&#x3D;15&#x60;.
   * @param facetValuesOn Override the &#x60;facetValues&#x60; attribute for a specific field. &#x60;facetValuesOn&#x3D;merchantId:12&#x60;
   * @param custom1 Custom parameter 1. Up to 511 characters. Custom parameters are a way to track your leads in the Publisher extranet, to give you a much deeper level of reporting granularity.
   * @param custom2 Custom parameter 2. Up to 127 characters. It\&#39;s for aggregation purpose so do not provide an id of the click or search on any custom parameter.
   * @param custom3 Custom parameter 3. Up to 127 characters. Please check the \&#39;Offer search &gt; Request &gt; Custom parameters\&#39; documentation section to get more details.
   */
  public async searchOffers(
    country:
      | 'ae'
      | 'at'
      | 'au'
      | 'be'
      | 'br'
      | 'ca'
      | 'ch'
      | 'cz'
      | 'de'
      | 'dk'
      | 'es'
      | 'fi'
      | 'fr'
      | 'gr'
      | 'hk'
      | 'hu'
      | 'id'
      | 'ie'
      | 'in'
      | 'it'
      | 'jp'
      | 'kr'
      | 'mx'
      | 'my'
      | 'nb'
      | 'nl'
      | 'no'
      | 'nz'
      | 'ph'
      | 'pl'
      | 'pt'
      | 'ro'
      | 'se'
      | 'sg'
      | 'sk'
      | 'tr'
      | 'uk'
      | 'us'
      | 'vn'
      | 'za',
    query?: string,
    queryMatchStrength?: 'all' | 'some' | 'any',
    filterBy?: Array<string>,
    filterGreaterThan?: Array<string>,
    filterGreaterThanEqual?: Array<string>,
    filterLowerThan?: Array<string>,
    filterLowerThanEqual?: Array<string>,
    filterValueExists?: Array<string>,
    fieldsAlias?: 'none' | 'minimal' | 'all',
    additionalFields?: string,
    sortBy?: 'price' | 'totalPrice' | 'performanceScore',
    sortDirection?: 'desc' | 'asc',
    pageSize?: number,
    page?: number,
    topOffers?: number,
    fieldsMeta?: string,
    facets?: string,
    facetValues?: number,
    facetValuesOn?: Array<string>,
    custom1?: string,
    custom2?: string,
    custom3?: string,
    options: { headers: { [name: string]: string } } = { headers: {} },
  ): Promise<{ response: http.IncomingMessage; body: ShoppingOffersResult }> {
    const localVarPath = this.basePath + '/search/offers';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'country' is not null or undefined
    if (country === null || country === undefined) {
      throw new Error('Required parameter country was null or undefined when calling searchOffers.');
    }

    if (country !== undefined) {
      localVarQueryParameters['country'] = ObjectSerializer.serialize(
        country,
        "'ae' | 'at' | 'au' | 'be' | 'br' | 'ca' | 'ch' | 'cz' | 'de' | 'dk' | 'es' | 'fi' | 'fr' | 'gr' | 'hk' | 'hu' | 'id' | 'ie' | 'in' | 'it' | 'jp' | 'kr' | 'mx' | 'my' | 'nb' | 'nl' | 'no' | 'nz' | 'ph' | 'pl' | 'pt' | 'ro' | 'se' | 'sg' | 'sk' | 'tr' | 'uk' | 'us' | 'vn' | 'za'",
      );
    }

    if (query !== undefined) {
      localVarQueryParameters['query'] = ObjectSerializer.serialize(query, 'string');
    }

    if (queryMatchStrength !== undefined) {
      localVarQueryParameters['queryMatchStrength'] = ObjectSerializer.serialize(
        queryMatchStrength,
        "'all' | 'some' | 'any'",
      );
    }

    if (filterBy !== undefined) {
      localVarQueryParameters['filterBy'] = ObjectSerializer.serialize(filterBy, 'Array<string>');
    }

    if (filterGreaterThan !== undefined) {
      localVarQueryParameters['filterGreaterThan'] = ObjectSerializer.serialize(filterGreaterThan, 'Array<string>');
    }

    if (filterGreaterThanEqual !== undefined) {
      localVarQueryParameters['filterGreaterThanEqual'] = ObjectSerializer.serialize(
        filterGreaterThanEqual,
        'Array<string>',
      );
    }

    if (filterLowerThan !== undefined) {
      localVarQueryParameters['filterLowerThan'] = ObjectSerializer.serialize(filterLowerThan, 'Array<string>');
    }

    if (filterLowerThanEqual !== undefined) {
      localVarQueryParameters['filterLowerThanEqual'] = ObjectSerializer.serialize(
        filterLowerThanEqual,
        'Array<string>',
      );
    }

    if (filterValueExists !== undefined) {
      localVarQueryParameters['filterValueExists'] = ObjectSerializer.serialize(filterValueExists, 'Array<string>');
    }

    if (fieldsAlias !== undefined) {
      localVarQueryParameters['fieldsAlias'] = ObjectSerializer.serialize(fieldsAlias, "'none' | 'minimal' | 'all'");
    }

    if (additionalFields !== undefined) {
      localVarQueryParameters['additionalFields'] = ObjectSerializer.serialize(additionalFields, 'string');
    }

    if (sortBy !== undefined) {
      localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(
        sortBy,
        "'price' | 'totalPrice' | 'performanceScore'",
      );
    }

    if (sortDirection !== undefined) {
      localVarQueryParameters['sortDirection'] = ObjectSerializer.serialize(sortDirection, "'desc' | 'asc'");
    }

    if (pageSize !== undefined) {
      localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, 'number');
    }

    if (page !== undefined) {
      localVarQueryParameters['page'] = ObjectSerializer.serialize(page, 'number');
    }

    if (topOffers !== undefined) {
      localVarQueryParameters['topOffers'] = ObjectSerializer.serialize(topOffers, 'number');
    }

    if (fieldsMeta !== undefined) {
      localVarQueryParameters['fieldsMeta'] = ObjectSerializer.serialize(fieldsMeta, 'string');
    }

    if (facets !== undefined) {
      localVarQueryParameters['facets'] = ObjectSerializer.serialize(facets, 'string');
    }

    if (facetValues !== undefined) {
      localVarQueryParameters['facetValues'] = ObjectSerializer.serialize(facetValues, 'number');
    }

    if (facetValuesOn !== undefined) {
      localVarQueryParameters['facetValuesOn'] = ObjectSerializer.serialize(facetValuesOn, 'Array<string>');
    }

    if (custom1 !== undefined) {
      localVarQueryParameters['custom1'] = ObjectSerializer.serialize(custom1, 'string');
    }

    if (custom2 !== undefined) {
      localVarQueryParameters['custom2'] = ObjectSerializer.serialize(custom2, 'string');
    }

    if (custom3 !== undefined) {
      localVarQueryParameters['custom3'] = ObjectSerializer.serialize(custom3, 'string');
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.JWT.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.JWT.applyToRequest(localVarRequestOptions),
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions),
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: ShoppingOffersResult }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
              body = ObjectSerializer.deserialize(body, 'ShoppingOffersResult');
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
